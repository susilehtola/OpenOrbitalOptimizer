name: Build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "9 16 * * 1"

jobs:
  build-test-repo:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - lane: linux-gnu
            runs-on: ubuntu-latest
            python-version: "3.10"
            cmargs: ""
          - lane: linux-icpx
            runs-on: ubuntu-latest
            python-version: "3.10"
            cmargs: >
              -D CMAKE_CXX_COMPILER=icpx
          - lane: macos-silicon-clang
            runs-on: macos-latest
            python-version: "3.10"
            cmargs: ""
          - lane: macos-intel-clang
            runs-on: macos-13
            python-version: "3.10"
            cmargs: ""
          - lane: windows-clang
            runs-on: windows-latest
            python-version: "3.10"
            cmargs: >
              -D CMAKE_INSTALL_LIBDIR="Library\mylib"
              -D CMAKE_INSTALL_INCLUDEDIR="Library\myinclude"
              -D CMAKE_INSTALL_BINDIR="Library\mybin"
              -D CMAKE_INSTALL_DATADIR="Library\myshare"
              -D OpenOrbitalOptimizer_INSTALL_CMAKEDIR="Library\OpenOrbitalOptimizer\CMake"
              -D CMAKE_CXX_COMPILER=clang-cl
              -D CMAKE_CXX_FLAGS="-I${CONDA_PREFIX}\\Library\\include"
              # Library/include/ compensates for faulty conda windows config

    name: "Repo • 🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.lane }}"
    runs-on: ${{ matrix.cfg.runs-on }}
    defaults:
      run:
        shell: bash -l {0}

    steps:
    - name: Checkout OpenOrbitalOptimizer
      uses: actions/checkout@v4

    - name: Checkout IntegratorXX
      uses: actions/checkout@v4
      with:
        repository: loriab/IntegratorXX
        ref: windows
        path: IntXX

    - name: Prepare compiler environment, vcvarsall (W)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Write a Conda Env File
      run: |
        cat > export.yaml <<EOF
        name: test
        channels:
          - conda-forge
        dependencies:
          - cmake >=3.12
          - ninja
          - cxx-compiler
          - armadillo
          - libxc-c
          - nlohmann_json
          - catch2  # for IntXX
          - libblas * *netlib  # netlib compensates for faulty conda windows config
          - liblapack * *netlib
          #- dummy1
        EOF
        # MacOS: sed -E -i.bak "s;;;g" export.yaml
        if [[ "${{ matrix.cfg.lane }}" == "linux-icpx" ]]; then
          :
          sed -i "s/#- dummy1/- dpcpp_linux-64/g" export.yaml
        fi
        cat export.yaml

    - name: Create Conda Environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.cfg.python-version }}
        activate-environment: test
        channels: conda-forge
        environment-file: export.yaml
        show-channel-urls: true
        auto-activate-base: false
        add-pip-as-python-dependency: true
        conda-remove-defaults: true

    - name: Environment Information
      run: |
        conda info
        conda list

    - name: Build & Install IntegratorXX
      working-directory: ./IntXX
      run: |
        cmake \
          -S . \
          -B build \
          -G "Ninja" \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX="${{github.workspace}}/installed" \
          -D CMAKE_INSTALL_LIBDIR=lib \
          -D CMAKE_CXX_COMPILER=${CXX} \
          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          -D INTEGRATORXX_ENABLE_TESTS=OFF \
          ${{ matrix.cfg.cmargs }}
        cmake --build build --target install

    - name: Build & Install OpenOrbitalOptimizer
      run: |
        cmake \
          -S . \
          -B build \
          -G "Ninja" \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_INSTALL_PREFIX="${{github.workspace}}/installed" \
          -D CMAKE_CXX_COMPILER=${CXX} \
          -D CMAKE_PREFIX_PATH="${CONDA_PREFIX};${CONDA_PREFIX}/Library" \
          -D IntegratorXX_DIR="${{github.workspace}}/installed/lib/cmake/IntegratorXX" \
          ${{ matrix.cfg.cmargs }}
        cmake --build build --target install

    - name: Test
      run: ctest --output-on-failure --test-dir build/

    - name: Testing find_package Consumption
      run: |
        mkdir consume_fp && cd consume_fp
        cat > CMakeLists.txt <<EOF
        cmake_minimum_required(VERSION 3.16)
        project(atomtest LANGUAGES CXX)
        find_package(OpenOrbitalOptimizer CONFIG REQUIRED)
        add_executable(atomtest EXCLUDE_FROM_ALL "../tests/atomtest.cpp")
        target_include_directories(atomtest PRIVATE "../tests/")
        find_package(Libxc CONFIG REQUIRED)
        find_package(IntegratorXX CONFIG REQUIRED)
        find_package(nlohmann_json CONFIG REQUIRED)
        target_link_libraries(
          atomtest
            OpenOrbitalOptimizer::OpenOrbitalOptimizer
            Libxc::xc
            IntegratorXX::IntegratorXX
            nlohmann_json::nlohmann_json
          )
        EOF
        cmake . -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="${{github.workspace}}/installed" ${{ matrix.cfg.cmargs }}
        cmake --build . --target atomtest
        ./atomtest --Z 8 --xfunc GGA_X_PBE --cfunc GGA_C_PBE --M 3 --sto 0 --basis "${{github.workspace}}/tests/cc-pvdz.json"

  release_docs:
    needs: [build-test-repo]
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - label: MkDocs
            python-version: "3.10"
            runs-on: ubuntu-latest

    name: "🐍 ${{ matrix.cfg.python-version }} • ${{ matrix.cfg.label }}"
    runs-on: ${{ matrix.cfg.runs-on }}

    steps:
    - uses: actions/checkout@v4

    - name: Write a Conda Env File
      run: |
          cat > export.yaml <<EOF
          name: test
          channels:
            - conda-forge
            - nodefaults
          dependencies:
            # Core
            - python
            # Docs
            - mkdocs
            - mkdocs-material
            - doxygen
            - pip
            - pip:
              - mkdoxy
          EOF
          cat export.yaml

    - name: Create Environment
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: test
        environment-file: export.yaml
        python-version: ${{ matrix.cfg.python-version }}
        auto-activate-base: false
        show-channel-urls: true
        add-pip-as-python-dependency: true
        channels: conda-forge,nodefaults

    - name: Environment Information
      run: |
        conda info
        conda list --show-channel-urls

    - name: Build Documentation
      run: |
        mkdocs build

    - name: GitHub Pages Deploy
      uses: JamesIves/github-pages-deploy-action@v4
      if: github.event_name == 'push' && github.repository == 'susilehtola/OpenOrbitalOptimizer' && ( startsWith(github.ref, 'refs/tags/' ) || github.ref == 'refs/heads/master' )
      with:
        branch: gh-pages
        folder: site
